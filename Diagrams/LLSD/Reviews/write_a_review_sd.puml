@startuml

actor User

participant "ProfilePage" as Pfp

participant "WriteReviewPage" as Wrp

participant "reviewRequest : ReviewRequest" as Rq

participant "ReviewController" as Rc

participant "reviewResponse : ReviewResponse" as Rr

participant "ReviewService" as Rs


participant "review : Review" as R


participant "ReviewRepository" as Rrep

participant "reviewDb : Review" as Rdb

participant "Database" as Db

participant "ReviewResponseMapper" as RresM

participant "ReviewRequestMapper" as RreqM


ref over Pfp, Wrp, Rq, Rc, Rr, Rs, R, Rrep, Rdb, Db, RresM, RreqM
    ViewOrderById
end ref

User -> Pfp: WriteReviewPage()
activate Pfp

Pfp -> Wrp: Render()
activate Wrp

User -> Wrp: SubmitReview()

Wrp -> Rq: POST /api/v1/corso/review

activate Rq

Rq -> Rc



activate Rc

Rc -> Rs: createReview()
activate Rs

Rs -> Rrep :reviewInLastWeekForUser(userId: String): Boolean
activate Rrep

Rrep -> Db : SELECT CASE WHEN EXISTS ( SELECT 1 FROM reviews WHERE user_id = :userId AND review_date > CURRENT_DATE() - INTERVAL '7' DAY) THEN 'true' ELSE 'false' END AS has_reviewed;
activate Db
Db --> Rrep: bool:Boolean
deactivate Db

Rrep --> Rs: bool:Boolean

deactivate Rrep



Rs -> RreqM: mapToReview(reviewRequest)

activate RreqM

RreqM -> R: Review

destroy Rq
destroy RreqM

activate R

R -> Rs : review : Review



Rs -> Rrep: save(review)
destroy R

Rrep -> Db: INSERT INTO review (...) VALUES (...)
activate Db

Db -> Rdb: reviewDb : Review
deactivate Db

activate Rdb
Rdb -> Rrep: reviewDb : Review

Rrep -> Rs: reviewDb : Review
destroy Rrep
Rs -> RresM: mapToReviewResponse(review)
destroy Rdb
activate RresM


RresM --> Rr: ReviewResponse
destroy RresM
activate Rr

Rr --> Rs : reviewResponse : ReviewResponse

Rs --> Rc: reviewResponse : ReviewResponse


Rc --> Wrp: reviewResponse : ReviewResponse

destroy Rr

@enduml