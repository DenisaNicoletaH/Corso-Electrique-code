@startuml
actor User

participant "ProfilePage" as Pfp

participant "CustomerViewsSpecificReview" as Urp

participant "reviewRequest : ReviewRequest" as Rq

participant "CustomerController" as Rc

participant "reviewResponse : ReviewResponse" as Rr

participant "ReviewService" as Rs


participant "review : Review" as R


participant "ReviewRepository" as Rrep

participant "reviewDb : Review" as Rdb

participant "Database" as Db

participant "ReviewResponseMapper" as RresM

participant "ReviewRequestMapper" as RreqM

ref over User, Pfp, Urp, Rq, Rc, Rr, Rs, R, Rrep, Rdb, Db, RresM, RreqM
    ViewReviewById
end ref

opt
User -> Pfp : CustomerViewsSpecificReview()
activate Pfp


Pfp -> Urp : Render()
activate Urp
User -> Urp : saveReview()
Urp -> Rq : PATCH api/v1/corso/customers/reviews/{reviewId}
activate Rq

Rq -> Rc

activate Rc

Rc -> Rs : updateCustomerReview(reviewId, userId, reviewRequest)
activate Rs

Rs -> Rrep: findReviewByReviewId_ReviewIdAndUserId(reviewId, userId)

activate Rrep

Rrep -> Db: SELECT * FROM review WHERE review_id = :reviewId AND user_id = :userId;

activate Db

Db -> Rdb: reviewDb : Review

deactivate Db

activate Rdb

Rdb -> Rrep: reviewDb : Review

deactivate Rdb

Rrep -> Rs: reviewDb : Review




Rs -> Rrep: save(review)

Rrep -> Db: UPDATE review SET review_date = :reviewDate, message = :message, review_rating = :reviewRating, WHERE user_id = :userId AND review_id = :reviewId;
activate Db

Db -> Rdb: reviewDb : Review
deactivate Db

activate Rdb
Rdb -> Rrep: reviewDb : Review

Rrep -> Rs: reviewDb : Review
deactivate Rrep
Rs -> RresM: toReviewResponse(review)
deactivate Rdb
activate RresM


RresM --> Rr: ReviewResponse



deactivate RresM
activate Rr

Rr --> Rs : reviewResponse : ReviewResponse

Rs --> Rc: reviewResponse : ReviewResponse


Rc --> Urp: reviewResponse : ReviewResponse



deactivate Rr

end opt

@enduml