@startuml
!include <archimate/Archimate>
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!include DEVICONS/java.puml
!include DEVICONS/mysql.puml
!include DEVICONS/react.puml
!include DEVICONS/html5.puml

!define SPRITESURL https://raw.githubusercontent.com/plantuml-stdlib/gilbarbara-plantuml-sprites/v1.1/sprites
!includeurl SPRITESURL/auth0.puml
!include DEVICONS/aws.puml

!define DEVICONS2 https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons2

!include DEVICONS2/google.puml

!include DEVICONS2/npm_original_wordmark.puml
AddElementTag("service", $shape=EightSidedShape(), $bgColor="Green", $fontColor="white", $legendText="API \neight sided")
AddElementTag("ext_service", $shape=EightSidedShape(), $bgColor="Gray", $fontColor="white" ,$legendText="External Services\neight sided")
AddElementTag("My SQL Database", $shape=RoundedBoxShape(), $bgColor="DarkCyan",$borderColor="Black", $fontColor="white", $legendText="Database")
AddElementTag("webSite", $shape=RoundedBoxShape(), $bgColor="DodgerBlue", $fontColor="white", $legendText="Single-Page Application")
AddElementTag("webApp", $shape=RoundedBoxShape(), $bgColor="OrangeRed", $fontColor="white", $legendText="Web Application")

SetDefaultLegendEntries("")


allowmixing


rectangle "Users Computer \n[Deployment Node: Windows OS, MacOS, Linux]" as computer{
    node "Web Browser \n[Deployment Node: Chrome, Firefox, Edge, Safari]"{
        Container(reactPage, "Web Application", "Container: Html, CSS and JS","Delivers the static content for the Single Page Application.",  $tags="webApp")
           }
}

rectangle "Users Phone \n[Deployment Node: Android, IOS]" as phone{
    node "Web Browser \n[Deployment Node: Chrome, Firefox, Edge, Safari]" as mobileBrowser{
            Container(reactPage_mobile, "Web Application", "Container: Html, CSS and JS","Delivers the static content for the Single Page Application.",  $tags="webApp")

    }
}

cloud render as "Digital Ocean \n[Deployment Node: digitalocean.com]"{
        node "Web Service\n[Deployment Node: Oracle Linux Server 8.5 (Fedora Linux)]" as backend{
                node "Docker Container\n[Deployment Node: Docker]" as docker{

                node "Apache Tomcat\n[Deployment Node : Apache Tomcat/10.1.13]" as tom {

                    Container(api, "API", "Container : Spring boot: Java", "Provides online tracking features and information about the electrical company Corso.", $sprite="java", $tags="service")

                }
                }
        }

        node "Static Site\n[Deployment Node:  webpack-server/^4.6.0]" as frontendNode{
            Container(frontend, "Single-Page Application", "Container: REACT TS", "Provides a GUI interface that contains all the functionalities of the Spring boot application. Uses REACT Router to handle the multiple pages.", $sprite="react",$tags="webSite")
        }

    database "Digital Ocean Database \n[Deployment Node:  MySQL Databse Cluster]" as database{
        ContainerDb(db, "Database", "Container : MySQL 8.0", "Stores all the data of the company related to orders, customers, reviews, FAQ's, galleries and services.", $sprite="mysql", $tags="My SQL Database")
    }
}




Container_Ext(cloudinary, "Cloudinary Service", "REST API", "Cloudinary's image hosting service and API.", $sprite="npm_original_wordmark", $tags="ext_service")
Container_Ext(auth, "Auth0", "SaaS", "Auth0 is an easy to implement, adaptable authentication and authorization platform.", $sprite="auth0", $tags="ext_service")
Container_Ext(email, "Gmail SMTP System", "Email Service", "The google SMTP emailing system.", $sprite="google", $tags="ext_service")


api ---> database: SQL/TCP\n[JBDC]

api -> frontend: Makes Api calls\n[JSON/HTTPS]

api ---> cloudinary: Makes Api calls\n[JSON/HTTPS]

api ---> auth: Authenticates\n[OAuth2/OpenID]

api ---> email: Sends Emails\n[SMTP/TCP/IP]


reactPage --> frontend: Uses website and delivers it\n[HTML/CSS/JS]

reactPage_mobile --> frontend: Uses website and delivers it\n[HTML/CSS/JS]


SHOW_LEGEND()
@endpuml